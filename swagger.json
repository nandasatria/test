{
  "swagger": "2.0",
  "info": {
    "version": "1.0.6",
    "title": "Swagger Petstore - OpenAPI 3.0",
    "description": "This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about\nSwagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!\nYou can now help us improve the API whether it's by making changes to the definition itself or to the code.\nThat way, with time, we can improve the API in general, and expose some of the new features in OAS3.\n\nSome useful links:\n- [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)\n- [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)",
    "contact": {
      "email": "apiteam@swagger.io"
    }
  },
  "host": "example.com",
  "basePath": "/api/v3",
  "securityDefinitions": {
    "api_key": {
      "type": "apiKey",
      "description": "",
      "name": "api_key",
      "in": "header"
    }
  },
  "schemes": [],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/pet": {
      "put": {
        "description": "Update an existing pet by Id",
        "summary": "updatePet",
        "tags": [
          "pet"
        ],
        "operationId": "updatePet",
        "deprecated": false,
        "produces": [
          "application/xml",
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "description": ""
          },
          {
            "name": "name",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "category",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": ""
          },
          {
            "name": "photoUrls",
            "in": "formData",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          {
            "name": "tags",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          {
            "name": "status",
            "in": "formData",
            "required": false,
            "enum": [
              "available",
              "pending",
              "sold"
            ],
            "type": "string",
            "description": "pet status in the store"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Pet"
            },
            "headers": {}
          },
          "400": {
            "description": "Invalid ID supplied",
            "headers": {}
          },
          "404": {
            "description": "Pet not found",
            "headers": {}
          },
          "405": {
            "description": "Validation exception",
            "headers": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "post": {
        "description": "Add a new pet to the store",
        "summary": "addPet",
        "tags": [
          "pet"
        ],
        "operationId": "addPet",
        "deprecated": false,
        "produces": [
          "application/xml",
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "description": ""
          },
          {
            "name": "name",
            "in": "formData",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "category",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": ""
          },
          {
            "name": "photoUrls",
            "in": "formData",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          {
            "name": "tags",
            "in": "formData",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": ""
          },
          {
            "name": "status",
            "in": "formData",
            "required": false,
            "enum": [
              "available",
              "pending",
              "sold"
            ],
            "type": "string",
            "description": "pet status in the store"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/Pet"
            },
            "headers": {}
          },
          "405": {
            "description": "Invalid input",
            "headers": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/pet/findByStatus": {
      "get": {
        "description": "Multiple status values can be provided with comma separated strings",
        "summary": "findPetsByStatus",
        "tags": [
          "pet"
        ],
        "operationId": "findPetsByStatus",
        "deprecated": false,
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "required": false,
            "enum": [
              "available",
              "pending",
              "sold"
            ],
            "default": "available",
            "type": "string",
            "description": "Status values that need to be considered for filter"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "xml": {
                "attribute": false,
                "wrapped": false
              },
              "type": "array",
              "items": {
                "$ref": "#/definitions/Pet"
              }
            },
            "headers": {}
          },
          "400": {
            "description": "Invalid status value",
            "headers": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/pet/findByTags": {
      "get": {
        "description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
        "summary": "findPetsByTags",
        "tags": [
          "pet"
        ],
        "operationId": "findPetsByTags",
        "deprecated": false,
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "tags",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Tags to filter by"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "xml": {
                "attribute": false,
                "wrapped": false
              },
              "type": "array",
              "items": {
                "$ref": "#/definitions/Pet"
              }
            },
            "headers": {}
          },
          "400": {
            "description": "Invalid tag value",
            "headers": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/pet/{petId}": {
      "get": {
        "description": "Returns a single pet",
        "summary": "getPetById",
        "tags": [
          "pet"
        ],
        "operationId": "getPetById",
        "deprecated": false,
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "ID of pet to return"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Pet"
            },
            "headers": {}
          },
          "400": {
            "description": "Invalid ID supplied",
            "headers": {}
          },
          "404": {
            "description": "Pet not found",
            "headers": {}
          }
        }
      },
      "post": {
        "description": "Updates a pet in the store with form data",
        "summary": "updatePetWithForm",
        "tags": [
          "pet"
        ],
        "operationId": "updatePetWithForm",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "ID of pet that needs to be updated"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Name of pet that needs to be updated"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Status of pet that needs to be updated"
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input",
            "headers": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      },
      "delete": {
        "description": "Deletes a pet",
        "summary": "deletePet",
        "tags": [
          "pet"
        ],
        "operationId": "deletePet",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "required": false,
            "type": "string",
            "description": ""
          },
          {
            "name": "petId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "Pet id to delete"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid pet value",
            "headers": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/pet/{petId}/uploadImage": {
      "post": {
        "description": "uploads an image",
        "summary": "uploadFile",
        "tags": [
          "pet"
        ],
        "operationId": "uploadFile",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/octet-stream",
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "ID of pet to update"
          },
          {
            "name": "additionalMetadata",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "Additional Metadata"
          },
          {
            "name": "body",
            "in": "formData",
            "required": false,
            "type": "file",
            "format": "file",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ApiResponse"
            },
            "headers": {}
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/store/inventory": {
      "get": {
        "description": "Returns a map of status codes to quantities",
        "summary": "getInventory",
        "tags": [
          "store"
        ],
        "operationId": "getInventory",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "integer",
                "format": "int32"
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/store/order": {
      "post": {
        "description": "Place a new order in the store",
        "summary": "placeOrder",
        "tags": [
          "store"
        ],
        "operationId": "placeOrder",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "description": ""
          },
          {
            "name": "petId",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "description": ""
          },
          {
            "name": "quantity",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": ""
          },
          {
            "name": "shipDate",
            "in": "formData",
            "required": false,
            "type": "string",
            "format": "date-time",
            "description": ""
          },
          {
            "name": "status",
            "in": "formData",
            "required": false,
            "enum": [
              "placed",
              "approved",
              "delivered"
            ],
            "type": "string",
            "description": "Order Status"
          },
          {
            "name": "complete",
            "in": "formData",
            "required": false,
            "type": "boolean",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Order"
            },
            "headers": {}
          },
          "405": {
            "description": "Invalid input",
            "headers": {}
          }
        }
      }
    },
    "/store/order/{orderId}": {
      "get": {
        "description": "For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions",
        "summary": "getOrderById",
        "tags": [
          "store"
        ],
        "operationId": "getOrderById",
        "deprecated": false,
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "ID of order that needs to be fetched"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Order"
            },
            "headers": {}
          },
          "400": {
            "description": "Invalid ID supplied",
            "headers": {}
          },
          "404": {
            "description": "Order not found",
            "headers": {}
          }
        }
      },
      "delete": {
        "description": "For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors",
        "summary": "deleteOrder",
        "tags": [
          "store"
        ],
        "operationId": "deleteOrder",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64",
            "description": "ID of the order that needs to be deleted"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
            "headers": {}
          },
          "404": {
            "description": "Order not found",
            "headers": {}
          }
        }
      }
    },
    "/user": {
      "post": {
        "description": "This can only be done by the logged in user.",
        "summary": "createUser",
        "tags": [
          "user"
        ],
        "operationId": "createUser",
        "deprecated": false,
        "produces": [
          "application/json",
          "application/xml"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "description": ""
          },
          {
            "name": "username",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": ""
          },
          {
            "name": "firstName",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": ""
          },
          {
            "name": "lastName",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": ""
          },
          {
            "name": "email",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": ""
          },
          {
            "name": "password",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": ""
          },
          {
            "name": "phone",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": ""
          },
          {
            "name": "userStatus",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "User Status"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            },
            "headers": {}
          }
        }
      }
    },
    "/user/createWithList": {
      "post": {
        "description": "Creates list of users with given input array",
        "summary": "createUsersWithListInput",
        "tags": [
          "user"
        ],
        "operationId": "createUsersWithListInput",
        "deprecated": false,
        "produces": [
          "application/xml",
          "application/json"
        ],
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": false,
            "description": "",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            },
            "headers": {}
          },
          "default": {
            "description": "successful operation",
            "headers": {}
          }
        }
      }
    },
    "/user/login": {
      "get": {
        "description": "Logs user into the system",
        "summary": "loginUser",
        "tags": [
          "user"
        ],
        "operationId": "loginUser",
        "deprecated": false,
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The user name for login"
          },
          {
            "name": "password",
            "in": "query",
            "required": false,
            "type": "string",
            "description": "The password for login in clear text"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "xml": {
                "name": "response200",
                "attribute": false,
                "wrapped": false
              },
              "type": "string"
            },
            "headers": {
              "X-Rate-Limit": {
                "description": "calls per hour allowed by the user",
                "type": "string"
              },
              "X-Expires-After": {
                "description": "date in UTC when token expires",
                "type": "string"
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied",
            "headers": {}
          }
        }
      }
    },
    "/user/logout": {
      "get": {
        "description": "Logs out current logged in user session",
        "summary": "logoutUser",
        "tags": [
          "user"
        ],
        "operationId": "logoutUser",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {}
          }
        }
      }
    },
    "/user/{username}": {
      "get": {
        "description": "Get user by user name",
        "summary": "getUserByName",
        "tags": [
          "user"
        ],
        "operationId": "getUserByName",
        "deprecated": false,
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name that needs to be fetched. Use user1 for testing."
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            },
            "headers": {}
          },
          "400": {
            "description": "Invalid username supplied",
            "headers": {}
          },
          "404": {
            "description": "User not found",
            "headers": {}
          }
        }
      },
      "put": {
        "description": "This can only be done by the logged in user.",
        "summary": "updateUser",
        "tags": [
          "user"
        ],
        "operationId": "updateUser",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "name that need to be deleted"
          },
          {
            "name": "id",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int64",
            "description": ""
          },
          {
            "name": "username",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": ""
          },
          {
            "name": "firstName",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": ""
          },
          {
            "name": "lastName",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": ""
          },
          {
            "name": "email",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": ""
          },
          {
            "name": "password",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": ""
          },
          {
            "name": "phone",
            "in": "formData",
            "required": false,
            "type": "string",
            "description": ""
          },
          {
            "name": "userStatus",
            "in": "formData",
            "required": false,
            "type": "integer",
            "format": "int32",
            "description": "User Status"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {}
          }
        }
      },
      "delete": {
        "description": "This can only be done by the logged in user.",
        "summary": "deleteUser",
        "tags": [
          "user"
        ],
        "operationId": "deleteUser",
        "deprecated": false,
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name that needs to be deleted"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied",
            "headers": {}
          },
          "404": {
            "description": "User not found",
            "headers": {}
          }
        }
      }
    }
  },
  "definitions": {
    "Order": {
      "title": "Order",
      "xml": {
        "name": "order",
        "attribute": false,
        "wrapped": false
      },
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "petId": {
          "type": "integer",
          "format": "int64"
        },
        "quantity": {
          "type": "integer",
          "format": "int32"
        },
        "shipDate": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "$ref": "#/definitions/Status"
        },
        "complete": {
          "type": "boolean"
        }
      }
    },
    "Customer": {
      "title": "Customer",
      "xml": {
        "name": "customer",
        "attribute": false,
        "wrapped": false
      },
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "username": {
          "type": "string"
        },
        "address": {
          "xml": {
            "name": "addresses",
            "attribute": false,
            "wrapped": true
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/Address"
          }
        }
      }
    },
    "Address": {
      "title": "Address",
      "xml": {
        "name": "address",
        "attribute": false,
        "wrapped": false
      },
      "type": "object",
      "properties": {
        "street": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "zip": {
          "type": "string"
        }
      }
    },
    "Category": {
      "title": "Category",
      "xml": {
        "name": "category",
        "attribute": false,
        "wrapped": false
      },
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "User": {
      "title": "User",
      "xml": {
        "name": "user",
        "attribute": false,
        "wrapped": false
      },
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "username": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "userStatus": {
          "description": "User Status",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Tag": {
      "title": "Tag",
      "xml": {
        "name": "tag",
        "attribute": false,
        "wrapped": false
      },
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "Pet": {
      "title": "Pet",
      "xml": {
        "name": "pet",
        "attribute": false,
        "wrapped": false
      },
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "category": {
          "$ref": "#/definitions/Category"
        },
        "photoUrls": {
          "xml": {
            "attribute": false,
            "wrapped": true
          },
          "type": "array",
          "items": {
            "xml": {
              "name": "photoUrl",
              "attribute": false,
              "wrapped": false
            },
            "type": "string"
          }
        },
        "tags": {
          "xml": {
            "attribute": false,
            "wrapped": true
          },
          "type": "array",
          "items": {
            "$ref": "#/definitions/Tag"
          }
        },
        "status": {
          "$ref": "#/definitions/Status1"
        }
      },
      "required": [
        "name",
        "photoUrls"
      ]
    },
    "ApiResponse": {
      "title": "ApiResponse",
      "xml": {
        "name": "_default",
        "attribute": false,
        "wrapped": false
      },
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "Status": {
      "title": "Status",
      "description": "Order Status",
      "type": "string",
      "enum": [
        "placed",
        "approved",
        "delivered"
      ]
    },
    "Status1": {
      "title": "Status1",
      "description": "pet status in the store",
      "type": "string",
      "enum": [
        "available",
        "pending",
        "sold"
      ]
    },
    "status2": {
      "title": "status2",
      "type": "string",
      "enum": [
        "available",
        "pending",
        "sold"
      ]
    }
  },
  "security": [
    {
      "api_key": []
    }
  ],
  "tags": [
    {
      "name": "pet",
      "description": "Everything about your Pets",
      "externalDocs": {
        "url": "http://swagger.io",
        "description": "Find out more"
      }
    },
    {
      "name": "store",
      "description": "Operations about user"
    },
    {
      "name": "user",
      "description": "Access to Petstore orders",
      "externalDocs": {
        "url": "http://swagger.io",
        "description": "Find out more about our store"
      }
    }
  ],
  "externalDocs": {
    "url": "http://swagger.io",
    "description": "Find out more about Swagger"
  }
}